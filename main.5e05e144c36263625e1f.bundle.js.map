{"version":3,"file":"main.5e05e144c36263625e1f.bundle.js","sources":["webpack:///./src/helpers.ts"],"sourcesContent":["export const CONNECTION_TIMEOUT = 1000;\n\n/**\n * check if the remote is trusted\n *\n * @param event\n */\nexport function isTrustedRemote(event: any) {\n  // TODO: implement\n  return true;\n}\n\n/**\n * check if run in a webworker\n *\n * @param event\n */\nexport function isWorker() {\n  return typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope\n}\n\n/**\n * we cannot send functions through postMessage\n * extract the path to all functions in the schema\n *\n * @param obj\n */\nexport function extractMethods(obj: any) {\n  const paths = [];\n  (function parse(obj: any, path = \"\") {\n    for (const prop in obj) {\n      const propPath = path ? `${path}.${prop}` : prop;\n      if (obj[prop] === Object(obj[prop])) {\n        parse(obj[prop], propPath);\n      }\n      if (typeof obj[prop] === \"function\") {\n        paths.push(propPath);\n      }\n    }\n  })(obj);\n  return paths;\n}\n\nconst urlRegex = /^(https?:|file:)?\\/\\/([^/:]+)?(:(\\d+))?/;\nconst ports: any = { \"http:\": \"80\", \"https:\": \"443\" };\n\n/**\n * convert the url into an origin (remove paths)\n *\n * @param url\n */\nexport function getOriginFromURL(url: string | null) {\n\n  const location = document.location;\n\n  const regexResult = urlRegex.exec(url || \"\");\n  let protocol;\n  let hostname;\n  let port;\n\n  if (regexResult) {\n    // It's an absolute URL. Use the parsed info.\n    // regexResult[1] will be undefined if the URL starts with //\n    protocol = regexResult[1] ? regexResult[1] : location.protocol;\n    hostname = regexResult[2];\n    port = regexResult[4];\n  } else {\n    // It's a relative path. Use the current location's info.\n    protocol = location.protocol;\n    hostname = location.hostname;\n    port = location.port;\n  }\n\n  // If the protocol is file, the origin is \"null\"\n  // The origin of a document with file protocol is an opaque origin\n  // and its serialization \"null\" [1]\n  // [1] https://html.spec.whatwg.org/multipage/origin.html#origin\n  if (protocol === \"file:\") {\n    return \"null\";\n  }\n\n  // If the port is the default for the protocol, we don't want to add it to the origin string\n  // or it won't match the message's event.origin.\n  const portSuffix = port && port !== ports[protocol] ? `:${port}` : \"\";\n  return `${protocol}//${hostname}${portSuffix}`;\n}\n"],"mappings":"AAAA","sourceRoot":""}